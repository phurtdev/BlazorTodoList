@* 
@page "/todo"
@using SharedModels.Models
@using WebClient.Services
@inject ITodoService TodoService

<h1 class="text-center">ToDo List</h1>

<div class="todo-container">
    <div class="input-group mb-3">
        <input @bind="newTodoTitle" type="text" class="form-control" placeholder="Enter a new task" />
        <button @onclick="AddTodo" class="btn btn-success">Add Task</button>
    </div>

    @if (todos == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var todo in todos)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div class="form-check">
                        <!-- Only use @bind here; it handles both state binding and the onchange event -->
                        <input type="checkbox" class="form-check-input" @bind="todo.IsComplete" />
                        <span class="ms-2 @(todo.IsComplete ? "text-decoration-line-through" : "")">@todo.Title</span>
                    </div>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteTodo(todo.Id)">Delete</button>
                </li>
            }
        </ul>
    }
</div>

@code {
    private IEnumerable<TodoItem> todos;
    private string newTodoTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        todos = await TodoService.GetTodos();
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle))
        {
            var newTodo = new TodoItem { Title = newTodoTitle, IsComplete = false };
            await TodoService.AddTodo(newTodo);
            newTodoTitle = string.Empty; // Clear input
            todos = await TodoService.GetTodos(); // Refresh list
        }
    }

    private async Task UpdateTodo(TodoItem todo)
    {
        await TodoService.UpdateTodo(todo);
    }

    private async Task DeleteTodo(int id)
    {
        await TodoService.DeleteTodo(id);
        todos = await TodoService.GetTodos(); // Refresh list
    }
} *@


@page "/todo"
@using SharedModels.Models
@using WebClient.Services
@inject ITodoService TodoService

<h1 class="text-center">ToDo List</h1>

<div class="todo-container">
    <div class="input-group mb-3">
        <!-- Add @onkeypress to trigger AddTodo when Enter is pressed -->
        <input @bind="newTodoTitle" @onkeypress="HandleKeyPress" type="text" class="form-control" placeholder="Enter a new task" />
        <button @onclick="AddTodo" class="btn btn-success">Add Task</button>
    </div>

    @if (todos == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var todo in todos)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="todo.IsComplete" />
                        <span class="ms-2 @(todo.IsComplete ? "text-decoration-line-through" : "")">@todo.Title</span>
                    </div>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteTodo(todo.Id)">Delete</button>
                </li>
            }
        </ul>
    }
</div>

@code {
    private IEnumerable<TodoItem> todos;
    private string newTodoTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        todos = await TodoService.GetTodos();
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle))
        {
            var newTodo = new TodoItem { Title = newTodoTitle, IsComplete = false };
            await TodoService.AddTodo(newTodo);
            newTodoTitle = string.Empty; // Clear input
            todos = await TodoService.GetTodos(); // Refresh list
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        // Check if the Enter key is pressed
        if (e.Key == "Enter")
        {
            await AddTodo();
        }
    }

    private async Task UpdateTodo(TodoItem todo)
    {
        await TodoService.UpdateTodo(todo);
    }

    private async Task DeleteTodo(int id)
    {
        await TodoService.DeleteTodo(id);
        todos = await TodoService.GetTodos(); // Refresh list
    }
}


